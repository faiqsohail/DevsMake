// Code generated by go-swagger; DO NOT EDIT.

package idea_post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetIdeasHandlerFunc turns a function with the right signature into a get ideas handler
type GetIdeasHandlerFunc func(GetIdeasParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIdeasHandlerFunc) Handle(params GetIdeasParams) middleware.Responder {
	return fn(params)
}

// GetIdeasHandler interface for that can handle valid get ideas params
type GetIdeasHandler interface {
	Handle(GetIdeasParams) middleware.Responder
}

// NewGetIdeas creates a new http.Handler for the get ideas operation
func NewGetIdeas(ctx *middleware.Context, handler GetIdeasHandler) *GetIdeas {
	return &GetIdeas{Context: ctx, Handler: handler}
}

/* GetIdeas swagger:route GET /ideas idea post getIdeas

gets list of all recent ideas posted

*/
type GetIdeas struct {
	Context *middleware.Context
	Handler GetIdeasHandler
}

func (o *GetIdeas) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetIdeasParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
