// Code generated by go-swagger; DO NOT EDIT.

package idea_post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetIdeaUUIDHandlerFunc turns a function with the right signature into a get idea UUID handler
type GetIdeaUUIDHandlerFunc func(GetIdeaUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIdeaUUIDHandlerFunc) Handle(params GetIdeaUUIDParams) middleware.Responder {
	return fn(params)
}

// GetIdeaUUIDHandler interface for that can handle valid get idea UUID params
type GetIdeaUUIDHandler interface {
	Handle(GetIdeaUUIDParams) middleware.Responder
}

// NewGetIdeaUUID creates a new http.Handler for the get idea UUID operation
func NewGetIdeaUUID(ctx *middleware.Context, handler GetIdeaUUIDHandler) *GetIdeaUUID {
	return &GetIdeaUUID{Context: ctx, Handler: handler}
}

/* GetIdeaUUID swagger:route GET /idea/{uuid} idea post getIdeaUuid

gets an idea by uuid

*/
type GetIdeaUUID struct {
	Context *middleware.Context
	Handler GetIdeaUUIDHandler
}

func (o *GetIdeaUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetIdeaUUIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
