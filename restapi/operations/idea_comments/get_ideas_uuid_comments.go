// Code generated by go-swagger; DO NOT EDIT.

package idea_comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetIdeasUUIDCommentsHandlerFunc turns a function with the right signature into a get ideas UUID comments handler
type GetIdeasUUIDCommentsHandlerFunc func(GetIdeasUUIDCommentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIdeasUUIDCommentsHandlerFunc) Handle(params GetIdeasUUIDCommentsParams) middleware.Responder {
	return fn(params)
}

// GetIdeasUUIDCommentsHandler interface for that can handle valid get ideas UUID comments params
type GetIdeasUUIDCommentsHandler interface {
	Handle(GetIdeasUUIDCommentsParams) middleware.Responder
}

// NewGetIdeasUUIDComments creates a new http.Handler for the get ideas UUID comments operation
func NewGetIdeasUUIDComments(ctx *middleware.Context, handler GetIdeasUUIDCommentsHandler) *GetIdeasUUIDComments {
	return &GetIdeasUUIDComments{Context: ctx, Handler: handler}
}

/* GetIdeasUUIDComments swagger:route GET /ideas/{uuid}/comments idea comments getIdeasUuidComments

gets all comments for a idea post

*/
type GetIdeasUUIDComments struct {
	Context *middleware.Context
	Handler GetIdeasUUIDCommentsHandler
}

func (o *GetIdeasUUIDComments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetIdeasUUIDCommentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
