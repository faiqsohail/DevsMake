// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"devsmake/models"
	"devsmake/restapi/operations/auth"
	"devsmake/restapi/operations/general"
	"devsmake/restapi/operations/idea_comments"
	"devsmake/restapi/operations/idea_post"
	"devsmake/restapi/operations/idea_submissions"
	"devsmake/restapi/operations/profile"
)

// NewDevsMakeAPI creates a new DevsMake instance
func NewDevsMakeAPI(spec *loads.Document) *DevsMakeAPI {
	return &DevsMakeAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		AuthGetAuthCallbackHandler: auth.GetAuthCallbackHandlerFunc(func(params auth.GetAuthCallbackParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.GetAuthCallback has not yet been implemented")
		}),
		AuthGetAuthLoginHandler: auth.GetAuthLoginHandlerFunc(func(params auth.GetAuthLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.GetAuthLogin has not yet been implemented")
		}),
		GeneralGetHealthcheckHandler: general.GetHealthcheckHandlerFunc(func(params general.GetHealthcheckParams) middleware.Responder {
			return middleware.NotImplemented("operation general.GetHealthcheck has not yet been implemented")
		}),
		IdeaPostGetIdeasHandler: idea_post.GetIdeasHandlerFunc(func(params idea_post.GetIdeasParams) middleware.Responder {
			return middleware.NotImplemented("operation idea_post.GetIdeas has not yet been implemented")
		}),
		IdeaPostGetIdeasUUIDHandler: idea_post.GetIdeasUUIDHandlerFunc(func(params idea_post.GetIdeasUUIDParams) middleware.Responder {
			return middleware.NotImplemented("operation idea_post.GetIdeasUUID has not yet been implemented")
		}),
		IdeaCommentsGetIdeasUUIDCommentsHandler: idea_comments.GetIdeasUUIDCommentsHandlerFunc(func(params idea_comments.GetIdeasUUIDCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation idea_comments.GetIdeasUUIDComments has not yet been implemented")
		}),
		IdeaSubmissionsGetIdeasUUIDSubmissionsHandler: idea_submissions.GetIdeasUUIDSubmissionsHandlerFunc(func(params idea_submissions.GetIdeasUUIDSubmissionsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation idea_submissions.GetIdeasUUIDSubmissions has not yet been implemented")
		}),
		ProfileGetProfileHandler: profile.GetProfileHandlerFunc(func(params profile.GetProfileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation profile.GetProfile has not yet been implemented")
		}),
		ProfileGetProfileIDHandler: profile.GetProfileIDHandlerFunc(func(params profile.GetProfileIDParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.GetProfileID has not yet been implemented")
		}),
		ProfileGetProfilesHandler: profile.GetProfilesHandlerFunc(func(params profile.GetProfilesParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.GetProfiles has not yet been implemented")
		}),
		IdeaPostPostIdeasHandler: idea_post.PostIdeasHandlerFunc(func(params idea_post.PostIdeasParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation idea_post.PostIdeas has not yet been implemented")
		}),
		IdeaCommentsPostIdeasUUIDCommentsHandler: idea_comments.PostIdeasUUIDCommentsHandlerFunc(func(params idea_comments.PostIdeasUUIDCommentsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation idea_comments.PostIdeasUUIDComments has not yet been implemented")
		}),
		IdeaSubmissionsPostIdeasUUIDSubmissionsHandler: idea_submissions.PostIdeasUUIDSubmissionsHandlerFunc(func(params idea_submissions.PostIdeasUUIDSubmissionsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation idea_submissions.PostIdeasUUIDSubmissions has not yet been implemented")
		}),
		IdeaPostPutIdeasUUIDRateHandler: idea_post.PutIdeasUUIDRateHandlerFunc(func(params idea_post.PutIdeasUUIDRateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation idea_post.PutIdeasUUIDRate has not yet been implemented")
		}),
		IdeaSubmissionsPutIdeasUUIDSubmissionsRateHandler: idea_submissions.PutIdeasUUIDSubmissionsRateHandlerFunc(func(params idea_submissions.PutIdeasUUIDSubmissionsRateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation idea_submissions.PutIdeasUUIDSubmissionsRate has not yet been implemented")
		}),

		GithubAuthAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (github_auth) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*DevsMakeAPI Bringing together users and developers to create amazing projects. */
type DevsMakeAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// GithubAuthAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	GithubAuthAuth func(string, []string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AuthGetAuthCallbackHandler sets the operation handler for the get auth callback operation
	AuthGetAuthCallbackHandler auth.GetAuthCallbackHandler
	// AuthGetAuthLoginHandler sets the operation handler for the get auth login operation
	AuthGetAuthLoginHandler auth.GetAuthLoginHandler
	// GeneralGetHealthcheckHandler sets the operation handler for the get healthcheck operation
	GeneralGetHealthcheckHandler general.GetHealthcheckHandler
	// IdeaPostGetIdeasHandler sets the operation handler for the get ideas operation
	IdeaPostGetIdeasHandler idea_post.GetIdeasHandler
	// IdeaPostGetIdeasUUIDHandler sets the operation handler for the get ideas UUID operation
	IdeaPostGetIdeasUUIDHandler idea_post.GetIdeasUUIDHandler
	// IdeaCommentsGetIdeasUUIDCommentsHandler sets the operation handler for the get ideas UUID comments operation
	IdeaCommentsGetIdeasUUIDCommentsHandler idea_comments.GetIdeasUUIDCommentsHandler
	// IdeaSubmissionsGetIdeasUUIDSubmissionsHandler sets the operation handler for the get ideas UUID submissions operation
	IdeaSubmissionsGetIdeasUUIDSubmissionsHandler idea_submissions.GetIdeasUUIDSubmissionsHandler
	// ProfileGetProfileHandler sets the operation handler for the get profile operation
	ProfileGetProfileHandler profile.GetProfileHandler
	// ProfileGetProfileIDHandler sets the operation handler for the get profile ID operation
	ProfileGetProfileIDHandler profile.GetProfileIDHandler
	// ProfileGetProfilesHandler sets the operation handler for the get profiles operation
	ProfileGetProfilesHandler profile.GetProfilesHandler
	// IdeaPostPostIdeasHandler sets the operation handler for the post ideas operation
	IdeaPostPostIdeasHandler idea_post.PostIdeasHandler
	// IdeaCommentsPostIdeasUUIDCommentsHandler sets the operation handler for the post ideas UUID comments operation
	IdeaCommentsPostIdeasUUIDCommentsHandler idea_comments.PostIdeasUUIDCommentsHandler
	// IdeaSubmissionsPostIdeasUUIDSubmissionsHandler sets the operation handler for the post ideas UUID submissions operation
	IdeaSubmissionsPostIdeasUUIDSubmissionsHandler idea_submissions.PostIdeasUUIDSubmissionsHandler
	// IdeaPostPutIdeasUUIDRateHandler sets the operation handler for the put ideas UUID rate operation
	IdeaPostPutIdeasUUIDRateHandler idea_post.PutIdeasUUIDRateHandler
	// IdeaSubmissionsPutIdeasUUIDSubmissionsRateHandler sets the operation handler for the put ideas UUID submissions rate operation
	IdeaSubmissionsPutIdeasUUIDSubmissionsRateHandler idea_submissions.PutIdeasUUIDSubmissionsRateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *DevsMakeAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *DevsMakeAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *DevsMakeAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DevsMakeAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DevsMakeAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DevsMakeAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DevsMakeAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DevsMakeAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DevsMakeAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DevsMakeAPI
func (o *DevsMakeAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.GithubAuthAuth == nil {
		unregistered = append(unregistered, "GithubAuthAuth")
	}

	if o.AuthGetAuthCallbackHandler == nil {
		unregistered = append(unregistered, "auth.GetAuthCallbackHandler")
	}
	if o.AuthGetAuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.GetAuthLoginHandler")
	}
	if o.GeneralGetHealthcheckHandler == nil {
		unregistered = append(unregistered, "general.GetHealthcheckHandler")
	}
	if o.IdeaPostGetIdeasHandler == nil {
		unregistered = append(unregistered, "idea_post.GetIdeasHandler")
	}
	if o.IdeaPostGetIdeasUUIDHandler == nil {
		unregistered = append(unregistered, "idea_post.GetIdeasUUIDHandler")
	}
	if o.IdeaCommentsGetIdeasUUIDCommentsHandler == nil {
		unregistered = append(unregistered, "idea_comments.GetIdeasUUIDCommentsHandler")
	}
	if o.IdeaSubmissionsGetIdeasUUIDSubmissionsHandler == nil {
		unregistered = append(unregistered, "idea_submissions.GetIdeasUUIDSubmissionsHandler")
	}
	if o.ProfileGetProfileHandler == nil {
		unregistered = append(unregistered, "profile.GetProfileHandler")
	}
	if o.ProfileGetProfileIDHandler == nil {
		unregistered = append(unregistered, "profile.GetProfileIDHandler")
	}
	if o.ProfileGetProfilesHandler == nil {
		unregistered = append(unregistered, "profile.GetProfilesHandler")
	}
	if o.IdeaPostPostIdeasHandler == nil {
		unregistered = append(unregistered, "idea_post.PostIdeasHandler")
	}
	if o.IdeaCommentsPostIdeasUUIDCommentsHandler == nil {
		unregistered = append(unregistered, "idea_comments.PostIdeasUUIDCommentsHandler")
	}
	if o.IdeaSubmissionsPostIdeasUUIDSubmissionsHandler == nil {
		unregistered = append(unregistered, "idea_submissions.PostIdeasUUIDSubmissionsHandler")
	}
	if o.IdeaPostPutIdeasUUIDRateHandler == nil {
		unregistered = append(unregistered, "idea_post.PutIdeasUUIDRateHandler")
	}
	if o.IdeaSubmissionsPutIdeasUUIDSubmissionsRateHandler == nil {
		unregistered = append(unregistered, "idea_submissions.PutIdeasUUIDSubmissionsRateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DevsMakeAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DevsMakeAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "github_auth":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.GithubAuthAuth(token, scopes)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *DevsMakeAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *DevsMakeAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *DevsMakeAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DevsMakeAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the devs make API
func (o *DevsMakeAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DevsMakeAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/callback"] = auth.NewGetAuthCallback(o.context, o.AuthGetAuthCallbackHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/login"] = auth.NewGetAuthLogin(o.context, o.AuthGetAuthLoginHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/healthcheck"] = general.NewGetHealthcheck(o.context, o.GeneralGetHealthcheckHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ideas"] = idea_post.NewGetIdeas(o.context, o.IdeaPostGetIdeasHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ideas/{uuid}"] = idea_post.NewGetIdeasUUID(o.context, o.IdeaPostGetIdeasUUIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ideas/{uuid}/comments"] = idea_comments.NewGetIdeasUUIDComments(o.context, o.IdeaCommentsGetIdeasUUIDCommentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ideas/{uuid}/submissions"] = idea_submissions.NewGetIdeasUUIDSubmissions(o.context, o.IdeaSubmissionsGetIdeasUUIDSubmissionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile"] = profile.NewGetProfile(o.context, o.ProfileGetProfileHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/{id}"] = profile.NewGetProfileID(o.context, o.ProfileGetProfileIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles"] = profile.NewGetProfiles(o.context, o.ProfileGetProfilesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ideas"] = idea_post.NewPostIdeas(o.context, o.IdeaPostPostIdeasHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ideas/{uuid}/comments"] = idea_comments.NewPostIdeasUUIDComments(o.context, o.IdeaCommentsPostIdeasUUIDCommentsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ideas/{uuid}/submissions"] = idea_submissions.NewPostIdeasUUIDSubmissions(o.context, o.IdeaSubmissionsPostIdeasUUIDSubmissionsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/ideas/{uuid}/rate"] = idea_post.NewPutIdeasUUIDRate(o.context, o.IdeaPostPutIdeasUUIDRateHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/ideas/{uuid}/submissions/rate"] = idea_submissions.NewPutIdeasUUIDSubmissionsRate(o.context, o.IdeaSubmissionsPutIdeasUUIDSubmissionsRateHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DevsMakeAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DevsMakeAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DevsMakeAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DevsMakeAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *DevsMakeAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
